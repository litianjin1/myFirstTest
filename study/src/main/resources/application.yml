server:
  port: 8092
  servlet:
    session:
      timeout: 30m
  tomcat:
    uri-encoding: utf-8
spring:
  application:
    name: study-service
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    initial-size: 5
    max-idle: 10
    max-wait: 10000
    min-idle: 5
    password: zj123456
    url: jdbc:mysql://127.0.0.1:3306/my_test?useSSL=false&useUnicode=true&characterEncoding=utf-8
    username: root
  redis:
    host: 127.0.0.1
    port: 6379
    database: 2
    password:      # 密码（默认为空）
    timeout: 6000ms  # 连接超时时长（毫秒）
    lettuce:
      pool:
        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 10      # 连接池中的最大空闲连接
        min-idle: 5       # 连接池中的最小空闲连接
  banner:
    image:
      location: classpath:222.jpg
  ###########【Kafka集群】###########
  kafka:
    bootstrap-servers: 123.57.237.20:9092,123.57.237.20:9093,123.57.237.20:9094
    ###########【初始化消费者配置】###########
    consumer:
      auto:
        commit:
          interval:
            ms: 1000 # 提交offset延时(接收到消息后多久提交offset)
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常
      auto-offset-reset: latest
      enable-auto-commit: true # 是否自动提交offset
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer # Kafka提供的序列化和反序列化类
      properties:
        group:
          id: defaultConsumerGroup  # 默认的消费组ID
        request:
          timeout:
            ms: 180000 # 消费请求超时时间
        session:
          timeout:
            ms: 120000 # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer # Kafka提供的序列化和反序列化类
      max-poll-records: 50 # 批量消费每次最多消费多少条消息
    listener:
      missing-topics-fatal: false # 消费端监听的topic不存在时，项目启动会报错(关掉)
#      type: batch # 设置批量消费
# 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
# linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
    producer:
      acks: 1 # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      batch-size: 16384  # 批量大小
      buffer-memory: 33554432 # 生产端缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # Kafka提供的序列化和反序列化类
      properties:
        linger:
          ms: 0 # 提交延时
#        partitioner:
#          class: com.example.study.testDemo.kafkaDemo.CustomizePartitioner # 自定义分区器
      retries: 0 # 重试次数
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      transaction-id-prefix: kafka-tran # 设置事务前缀
      isolation:
        level: read_committed
      enable:
        auto:
          commit: false

eureka:
  instance:
    hostname: study-service
    prefer-ip-address: true
  client: # 服务提供者provider注册金eureka服务列表内
    service-url:
      register-with-eureka: true
      fetch-registry: true
      defaultZone: http://127.0.0.1:8090/eureka/


